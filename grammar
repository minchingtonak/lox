~= Grammar for Lox =~

program     → declaration* EOF ;

declaration → varDecl
            | statement ;

varDecl     → "var" IDENTIFIER ( "=" expression )? ";" ;

statement   → exprStmt
            | printStmt
            | block ;

exprStmt    → expression ";" ;
printStmt   → "print" expression ";" ;
block       → "{" declaration* "}" ;

expression  → literal
            | unary
            | binary
            | ternary
            | grouping ;
literal     → NUMBER | STRING | "true" | "false" | "nil" ;
grouping    → "(" expression ")" ;
unary       → ( "-" | "!" ) expression ;
binary      → expression operator expression ;
ternary     → expression "?" expression ":" expression ;
operator    → "==" | "!=" | "<" | "<=" | ">" | ">="
            | "+"  | "-"  | "*" | "/" | "," | "=" ;


~= Modified for recursive descent parsing =~

expression      → comma ;
comma           → assignment ( "," assignment )* ;
assignment      → IDENTIFIER "=" assignment
                | ternary ;
ternary         → equality ( "?" equality ":" ternary )? ;
equality        → comparison ( ( "!=" | "==" ) comparison )* ;
comparison      → addition ( ( ">" | ">=" | "<" | "<=" ) addition )* ;
addition        → multiplication ( ( "-" | "+" ) multiplication )* ;
multiplication  → unary ( ( "/" | "*" ) unary )* ;
unary           → ( "!" | "-" ) unary
                | primary ;
primary         → NUMBER | STRING | "false" | "true" | "nil"
                | "(" expression ")" | IDENTIFIER ;


~= Operator precedence table (descending precedence) =~

Name 	        Operators 	Associates
Unary 	        ! - 	    Right
Multiplication 	/ * 	    Left
Addition 	    - + 	    Left
Comparison 	    > >= < <= 	Left
Equality 	    == != 	    Left
Ternary         ?:          Right
Assignment      =           Right
Comma           ,           Left